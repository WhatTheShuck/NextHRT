// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output = "../generated/prisma_client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Employee {
  id              Int               @id @default(autoincrement())
  // email String  @unique
  firstName       String
  lastName        String
  WorkAreaID      Int
  Title           String
  StartDate       DateTime?
  FinishDate      DateTime?
  Department      String
  Location        String
  IsActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  TrainingRecords TrainingRecords[]
}

model TrainingRecords {
  id            Int       @id @default(autoincrement())
  personTrained Employee  @relation(fields: [employeeId], references: [id])
  employeeId    Int
  dateCompleted DateTime
  training      Training  @relation(fields: [trainingId], references: [id])
  trainingId    Int
  expiryDate    DateTime? // should probably be default dateCompleted + 1 year
  trainer       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  @@unique([employeeId, trainingId, dateCompleted])
}

model Training {
  id              Int               @id @default(autoincrement())
  category        Category
  title           String
  RenewalPeriod   Int               @default(0) // in months
  TrainingRecords TrainingRecords[]
}

enum Category {
  Internal
  External
}


model User {
 id            String          @id @default(cuid())
 name          String?
 email         String?         @unique
 emailVerified DateTime?
 image         String?
 accounts      Account[]
 sessions      Session[]
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
}

model Account {
 id                String  @id @default(cuid())
 userId            String
 type              String
 provider          String
 providerAccountId String
 refresh_token     String?
 access_token      String?
 expires_at        Int?
 token_type        String?
 scope             String?
 id_token          String?
 session_state     String?

 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt

 user User @relation(fields: [userId], references: [id], onDelete: Cascade)

 @@unique([provider, providerAccountId])
}

model Session {
 id           String   @id @default(cuid())
 sessionToken String   @unique
 userId       String
 expires      DateTime
 user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
}

model VerificationToken {
 identifier String
 token      String
 expires    DateTime

 @@unique([identifier, token])
}
