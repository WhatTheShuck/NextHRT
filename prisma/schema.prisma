// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma_client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Employee {
  id                       Int                       @id @default(autoincrement())
  firstName                String
  lastName                 String
  title                    String
  startDate                DateTime
  finishDate               DateTime?
  department               Department                @relation(fields: [departmentId], references: [id])
  departmentId             Int
  location                 Location                  @relation(fields: [locationId], references: [id])
  locationId               Int
  notes                    String?
  usi                      String? //Universal Student Identifier
  isActive                 Boolean                   @default(true)
  status                   EmployeeStatus            @default(Permanent)
  trainingRecords          TrainingRecords[]
  ticketRecords            TicketRecords[]
  trainingTicketExemptions TrainingTicketExemption[]
  User                     User?
}

enum EmployeeStatus {
  Permanent
  Apprentice
  LabourContractor
  IndustryExperience
  PartTimePermanent
}

model Location {
  id       Int     @id @default(autoincrement())
  name     String
  state    String
  isActive Boolean @default(true)

  employees            Employee[]
  trainingRequirements TrainingRequirement[]
  ticketRequirements   TicketRequirement[]

  @@unique([name, state])
}

model Department {
  id                 Int          @id @default(autoincrement())
  name               String       @unique
  isActive           Boolean      @default(true)
  // Self-referential relationship for tiered departments
  parentDepartment   Department?  @relation("DepartmentHierarchy", fields: [parentDepartmentId], references: [id])
  parentDepartmentId Int?
  childDepartments   Department[] @relation("DepartmentHierarchy")

  // Computed field to determine hierarchy level (0 = root, 1 = first level, etc.)
  level Int @default(0)

  employees            Employee[]
  managers             User[]                @relation("DepartmentManager")
  trainingRequirements TrainingRequirement[]
  ticketRequirements   TicketRequirement[]
}

model Training {
  id                 Int                       @id @default(autoincrement())
  category           Category
  title              String
  isActive           Boolean                   @default(true)
  trainingRecords    TrainingRecords[]
  requirements       TrainingRequirement[]
  trainingExemptions TrainingTicketExemption[]
}

model TrainingRecords {
  id            Int      @id @default(autoincrement())
  personTrained Employee @relation(fields: [employeeId], references: [id])
  employeeId    Int
  dateCompleted DateTime
  training      Training @relation(fields: [trainingId], references: [id])
  trainingId    Int
  trainer       String
  imagePath     String?
  imageType     String?

  @@unique([employeeId, trainingId, dateCompleted])
}

model TrainingRequirement {
  trainingId   Int
  departmentId Int
  locationId   Int
  training     Training   @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  location     Location   @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@id([trainingId, departmentId, locationId])
}

enum Category {
  Internal
  External
  SOP
}

model Ticket {
  id               Int                       @id @default(autoincrement())
  ticketCode       String
  ticketName       String
  renewal          Int? // in years
  isActive         Boolean                   @default(true)
  ticketRecords    TicketRecords[]
  requirements     TicketRequirement[]
  ticketExemptions TrainingTicketExemption[]
}

model TicketRecords {
  id            Int           @id @default(autoincrement())
  ticketHolder  Employee      @relation(fields: [employeeId], references: [id])
  employeeId    Int
  dateIssued    DateTime
  ticket        Ticket        @relation(fields: [ticketId], references: [id])
  ticketId      Int
  licenseNumber String? // Optional unique number for the actual license instance
  expiryDate    DateTime?
  images        TicketImage[]
}

model TicketImage {
  id             Int           @id @default(autoincrement())
  ticketRecord   TicketRecords @relation(fields: [ticketRecordId], references: [id], onDelete: Cascade)
  ticketRecordId Int
  imagePath      String
  imageType      String
  originalName   String
  uploadedAt     DateTime      @default(now())

  @@index([ticketRecordId])
}

model TicketRequirement {
  ticketId     Int
  departmentId Int
  locationId   Int
  ticket       Ticket     @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  location     Location   @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@id([ticketId, departmentId, locationId])
}

model TrainingTicketExemption {
  id         Int             @id @default(autoincrement())
  employee   Employee        @relation(fields: [employeeId], references: [id])
  employeeId Int
  type       ExemptionType // Training or Ticket
  training   Training?       @relation(fields: [trainingId], references: [id])
  trainingId Int? // Only populated if type is Training
  ticket     Ticket?         @relation(fields: [ticketId], references: [id])
  ticketId   Int? // Only populated if type is Ticket
  reason     String // Why they're exempted
  startDate  DateTime        @default(now()) // When exemption starts
  endDate    DateTime? // Optional: When exemption expires
  status     ExemptionStatus @default(Active)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

enum ExemptionType {
  Training
  Ticket
}

enum ExemptionStatus {
  Active
  Expired
  Revoked
}

model History {
  id            Int      @id @default(autoincrement())
  tableName     String // Which table was affected (Employee, Training, etc.)
  recordId      String // ID of the record that was changed
  action        String // CREATE, UPDATE, DELETE
  changedFields String? // JSON string of changed fields
  oldValues     String? // JSON string of previous values
  newValues     String? // JSON string of new values
  userId        String? // Foreign key to User model
  user          User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  timestamp     DateTime @default(now()) // When the change occurred
}

model User {
  id                           String       @id @default(cuid())
  name                         String?
  email                        String?      @unique
  emailVerified                Boolean?
  image                        String?
  role                         UserRole?    @default(User)
  managedDepartments           Department[] @relation("DepartmentManager")
  canManageChildrenDepartments Boolean      @default(false) // Can manage child departments
  employee                     Employee?    @relation(fields: [employeeId], references: [id])
  employeeId                   Int?         @unique // Link to employee if user represents an employee
  accounts                     Account[]
  sessions                     Session[]
  historyLogs                  History[]
  createdAt                    DateTime     @default(now())
  updatedAt                    DateTime     @updatedAt
}

enum UserRole {
  User
  DepartmentManager
  EmployeeViewer
  FireWarden
  Admin
}

model Account {
  id                   String    @id @default(cuid())
  userId               String
  providerId           String    @map("provider") // Map your existing `provider` field to Better Auth's `providerId`
  accountId            String    @map("providerAccountId")
  refreshToken         String?   @map("refresh_token")
  accessToken          String?   @map("access_token")
  accessTokenExpiresAt DateTime? @map("expires_at")
  scope                String?
  idToken              String?   @map("id_token")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime @map("expires") // Map your existing `expires` field to Better Auth's `expiresAt`
  token     String   @map("sessionToken") // Map your existing `sessionToken` field to Better Auth's `token`
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
}
